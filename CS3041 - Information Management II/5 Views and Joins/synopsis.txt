Views can be used to create virtual tables allowing users to access specific data from multiple tables without writing complex queries. Contents of views change when contents of their underlying tables change. Views allow users to only be shown data that is of interest or concern. They provide security be hiding sensitive or irrelevant data. They simplify database access by structuring retrieved data in more natural ways. Views have worse performance than tables as more computation occurs when a view is queried compared to a table. For more complex views the database stores the results from a view query in a temporary table which it discards when appropriate.

Views can be created using the create view statement and each view consists of at least one column. Each view is assigned a name and a virtual content defined by a select statement. Names must be assigned to view columns when they are the result of an expression, function or constant or when two columns will end up with the same name. The with check option can be specified if the view and its query expression are update-able.

Joins allow us to retrieve and combine data from multiple tables They are specified with the Join command. Which columns to join tables on are specified using join operators. An equi-join occurs when a = is used as the join operator. Joins are needed as the relational model may lead us to partition data into several single subject tables. The results of a join operation are a subset of the Cartesian product of the rows in each joined table. Few SQL implementation support joining on null values. An inner join displays rows contained in both joined tables matching the search condition.

Aliases or correlation names allow a convenient shorthand to be used in place of a table name.